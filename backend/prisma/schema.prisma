// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  MEMBER
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  DONE
}

model User {
  id Int @id @default(autoincrement())
  name String
  email String @unique
  password String
  role Role @default(MEMBER)
  tasks Task[] @relation("AssignedTasks")
  createdTasks Task[] @relation("CreatedTasks")
  activities    Activity[] @relation("UserActivities")
  isActive Boolean @default(true)
  created_at DateTime @default(now())
}

model Task {
  id          Int     @id @default(autoincrement())
  title       String
  description String
  status      TaskStatus @default(TODO)
  assigneeId  Int
  assignee    User   @relation("AssignedTasks", fields: [assigneeId], references: [id])
  createdById Int
  createdBy   User   @relation("CreatedTasks", fields: [createdById], references: [id])
  activities  Activity[] @relation("TaskActivities")
  created_at DateTime @default(now())
}

model Activity {
  id        String   @id @default(cuid())
  actorId   Int
  actor     User     @relation("UserActivities", fields: [actorId], references: [id])
  taskId    Int?
  task      Task?     @relation("TaskActivities", fields: [taskId], references: [id])
  action    String  
  payload   Json  
  createdAt DateTime @default(now())
}

